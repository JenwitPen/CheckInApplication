package checkin.maceducation.daogenerator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import checkin.maceducation.daogenerator.CheckIn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHECK_IN.
*/
public class CheckInDao extends AbstractDao<CheckIn, Long> {

    public static final String TABLENAME = "CHECK_IN";

    /**
     * Properties of entity CheckIn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TripEaID = new Property(1, Integer.class, "TripEaID", false, "TRIP_EA_ID");
        public final static Property CheckInName = new Property(2, String.class, "CheckInName", false, "CHECK_IN_NAME");
        public final static Property CheckInAddress = new Property(3, String.class, "CheckInAddress", false, "CHECK_IN_ADDRESS");
        public final static Property CheckInDate = new Property(4, String.class, "CheckInDate", false, "CHECK_IN_DATE");
        public final static Property Latitude = new Property(5, String.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Remark = new Property(7, String.class, "Remark", false, "REMARK");
        public final static Property Image = new Property(8, String.class, "Image", false, "IMAGE");
        public final static Property CheckInType = new Property(9, Integer.class, "CheckInType", false, "CHECK_IN_TYPE");
        public final static Property StatusSend = new Property(10, Integer.class, "StatusSend", false, "STATUS_SEND");
        public final static Property TripEaCustomerID = new Property(11, Integer.class, "TripEaCustomerID", false, "TRIP_EA_CUSTOMER_ID");
        public final static Property EnergyTypeID = new Property(12, Integer.class, "EnergyTypeID", false, "ENERGY_TYPE_ID");
        public final static Property EnergyPrice = new Property(13, Double.class, "EnergyPrice", false, "ENERGY_PRICE");
        public final static Property ActivityID = new Property(14, Integer.class, "ActivityID", false, "ACTIVITY_ID");
        public final static Property CheckInActivityRemark = new Property(15, String.class, "CheckInActivityRemark", false, "CHECK_IN_ACTIVITY_REMARK");
        public final static Property CheckInActivityContact = new Property(16, String.class, "CheckInActivityContact", false, "CHECK_IN_ACTIVITY_CONTACT");
        public final static Property CheckInActivityPosition = new Property(17, String.class, "CheckInActivityPosition", false, "CHECK_IN_ACTIVITY_POSITION");
        public final static Property CheckInActivityEmail = new Property(18, String.class, "CheckInActivityEmail", false, "CHECK_IN_ACTIVITY_EMAIL");
        public final static Property CheckInActivityTel = new Property(19, String.class, "CheckInActivityTel", false, "CHECK_IN_ACTIVITY_TEL");
        public final static Property SubjectID = new Property(20, Integer.class, "SubjectID", false, "SUBJECT_ID");
        public final static Property EAID = new Property(21, Integer.class, "EAID", false, "EAID");
    };


    public CheckInDao(DaoConfig config) {
        super(config);
    }
    
    public CheckInDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHECK_IN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TRIP_EA_ID' INTEGER," + // 1: TripEaID
                "'CHECK_IN_NAME' TEXT," + // 2: CheckInName
                "'CHECK_IN_ADDRESS' TEXT," + // 3: CheckInAddress
                "'CHECK_IN_DATE' TEXT," + // 4: CheckInDate
                "'LATITUDE' TEXT," + // 5: Latitude
                "'LONGITUDE' TEXT," + // 6: Longitude
                "'REMARK' TEXT," + // 7: Remark
                "'IMAGE' TEXT," + // 8: Image
                "'CHECK_IN_TYPE' INTEGER," + // 9: CheckInType
                "'STATUS_SEND' INTEGER," + // 10: StatusSend
                "'TRIP_EA_CUSTOMER_ID' INTEGER," + // 11: TripEaCustomerID
                "'ENERGY_TYPE_ID' INTEGER," + // 12: EnergyTypeID
                "'ENERGY_PRICE' REAL," + // 13: EnergyPrice
                "'ACTIVITY_ID' INTEGER," + // 14: ActivityID
                "'CHECK_IN_ACTIVITY_REMARK' TEXT," + // 15: CheckInActivityRemark
                "'CHECK_IN_ACTIVITY_CONTACT' TEXT," + // 16: CheckInActivityContact
                "'CHECK_IN_ACTIVITY_POSITION' TEXT," + // 17: CheckInActivityPosition
                "'CHECK_IN_ACTIVITY_EMAIL' TEXT," + // 18: CheckInActivityEmail
                "'CHECK_IN_ACTIVITY_TEL' TEXT," + // 19: CheckInActivityTel
                "'SUBJECT_ID' INTEGER," + // 20: SubjectID
                "'EAID' INTEGER);"); // 21: EAID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHECK_IN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CheckIn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer TripEaID = entity.getTripEaID();
        if (TripEaID != null) {
            stmt.bindLong(2, TripEaID);
        }
 
        String CheckInName = entity.getCheckInName();
        if (CheckInName != null) {
            stmt.bindString(3, CheckInName);
        }
 
        String CheckInAddress = entity.getCheckInAddress();
        if (CheckInAddress != null) {
            stmt.bindString(4, CheckInAddress);
        }
 
        String CheckInDate = entity.getCheckInDate();
        if (CheckInDate != null) {
            stmt.bindString(5, CheckInDate);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(6, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(8, Remark);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(9, Image);
        }
 
        Integer CheckInType = entity.getCheckInType();
        if (CheckInType != null) {
            stmt.bindLong(10, CheckInType);
        }
 
        Integer StatusSend = entity.getStatusSend();
        if (StatusSend != null) {
            stmt.bindLong(11, StatusSend);
        }
 
        Integer TripEaCustomerID = entity.getTripEaCustomerID();
        if (TripEaCustomerID != null) {
            stmt.bindLong(12, TripEaCustomerID);
        }
 
        Integer EnergyTypeID = entity.getEnergyTypeID();
        if (EnergyTypeID != null) {
            stmt.bindLong(13, EnergyTypeID);
        }
 
        Double EnergyPrice = entity.getEnergyPrice();
        if (EnergyPrice != null) {
            stmt.bindDouble(14, EnergyPrice);
        }
 
        Integer ActivityID = entity.getActivityID();
        if (ActivityID != null) {
            stmt.bindLong(15, ActivityID);
        }
 
        String CheckInActivityRemark = entity.getCheckInActivityRemark();
        if (CheckInActivityRemark != null) {
            stmt.bindString(16, CheckInActivityRemark);
        }
 
        String CheckInActivityContact = entity.getCheckInActivityContact();
        if (CheckInActivityContact != null) {
            stmt.bindString(17, CheckInActivityContact);
        }
 
        String CheckInActivityPosition = entity.getCheckInActivityPosition();
        if (CheckInActivityPosition != null) {
            stmt.bindString(18, CheckInActivityPosition);
        }
 
        String CheckInActivityEmail = entity.getCheckInActivityEmail();
        if (CheckInActivityEmail != null) {
            stmt.bindString(19, CheckInActivityEmail);
        }
 
        String CheckInActivityTel = entity.getCheckInActivityTel();
        if (CheckInActivityTel != null) {
            stmt.bindString(20, CheckInActivityTel);
        }
 
        Integer SubjectID = entity.getSubjectID();
        if (SubjectID != null) {
            stmt.bindLong(21, SubjectID);
        }
 
        Integer EAID = entity.getEAID();
        if (EAID != null) {
            stmt.bindLong(22, EAID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CheckIn readEntity(Cursor cursor, int offset) {
        CheckIn entity = new CheckIn( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TripEaID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CheckInName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CheckInAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CheckInDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Image
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // CheckInType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // StatusSend
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // TripEaCustomerID
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // EnergyTypeID
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // EnergyPrice
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // ActivityID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CheckInActivityRemark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CheckInActivityContact
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CheckInActivityPosition
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // CheckInActivityEmail
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // CheckInActivityTel
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // SubjectID
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21) // EAID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CheckIn entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTripEaID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCheckInName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckInAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCheckInDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCheckInType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStatusSend(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTripEaCustomerID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEnergyTypeID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setEnergyPrice(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setActivityID(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCheckInActivityRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCheckInActivityContact(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCheckInActivityPosition(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCheckInActivityEmail(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCheckInActivityTel(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSubjectID(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setEAID(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CheckIn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CheckIn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
